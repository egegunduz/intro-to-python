
basics improvements
===================

2)
https://towardsdatascience.com/https-towardsdatascience-com-python-basics-mutable-vs-immutable-objects-829a0cb1530a

3)
define *args and **kwargs
call function with unpacking lists and dicts
pure functions (no side effects)  vs.  modifiers (changes visible to caller)
why is something in standard library vs. core

6)
define iterable in for section
introduce zip in for section
break
continue
change local_search() function in Newton's Method cas to use for else
while True

7)
add str.replace()

new notebook on exceptions
raising exceptions
handling exceptions
warnings

8)
zip -> use to transpose a matrix
reversed

9)
think of tuples as records

11)
dict comprehensions

12)
set comprehensions

13)
https://stackoverflow.com/questions/1436703/difference-between-str-and-repr
abs() -> call norm ?
__bool__
scoping for derived classes
custom exceptions are classes
namedtuples are also classes
python data model


intermediate content
====================

modules and packages -> introduce spyder

decorators & closures
nonlocal scope

files & csv

requests + urlparse + https://github.com/python-hyper/hyperlink

beautifulsoup

regular expressions

date and datetimes, timedeltas

multiple inheritance & method resolution order & super
raymond hettinger talk - super considered super

sys and os

dynamic execution of code with eval and exec

base64 encoding


python data model
=================

iterables and iterators
https://www.youtube.com/watch?v=jTYiNjvnHZY&list=WL&index=141&t=0s
generators
iter(foo) is iter(foo)
itertools

with and context managers

sequences

interfaces


metaprogramming
===============

writable properties & descriptors

metaclasses


concurrency
===========

coroutines
